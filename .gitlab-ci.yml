# Default image, if not specified
image: "python:3.8"

stages:
  - Static Analysis
  - Readthedocs Documentation
  - Build latex Documentation
  - Publish latex Documentation
  - Test
  #- Full test
  - Publish test report
  - Combine quality documentation


### Setup cache ###
# See https://docs.gitlab.com/ee/ci/caching/index.html
#
# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  key: ${CI_JOB_NAME}
  paths:
    - .cache/pip
    - .tox/
    - venv/

# Make a template for steps that use a python virtual env
.py_venv:
  before_script:
    # Store the CI_JOB_TOKEN so that jobs can access other repositories with the access rights of the triggering user:
    - echo -e "machine gitlab.npl.co.uk\nlogin gitlab-ci-token\npassword ${CI_JOB_TOKEN}" > ~/.netrc
    # Debug output
    - ls -la
    - pwd
    - python -c "import sys;print(sys.path)"
    - python --version
    # Set up git for test commits
    - git config --global user.name "Gitlabs CI Testing"
    - git config --global user.email "test@example.com"
    # Make a virtual environment to install deps into (this will be cached for each step)
    - python --version
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install .[dev]

### Linting ###

black:
  image: 
    name: cytopia/black
    entrypoint: [""]
  stage: Static Analysis
  script:
    - black --check punpy
  allow_failure: true
  needs: []


mypy:
  image:
    name: grktsh/mypy
    entrypoint: [""]
  stage: Static Analysis
  script:
    - mypy punpy
  allow_failure: true
  needs: []


### Tests ###
.tox:
  extends: .py_venv
  script:
    - pwd
    - ls -l
    - export PYTHONPATH="$PYTHONPATH:."
    - python -c "import sys;print(sys.path)"
    - pip install tox
    - mkdir test_report
    - tox
  coverage: '/^TOTAL.+?(\d+\%)$/'
  needs: []
  artifacts:
    when: always
    paths:
      - test_report/
      - test_report/cov_report
    expire_in: 1 hour

tox-3.6:
  extends: ".tox"
  stage: "Test"
  image: "python:3.6"
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always

tox-3.9:
  extends: ".tox"
  stage: "Test"
  image: "python:3.9"

tox-3.8:
  extends: ".tox"
  stage: "Test"
  image: "python:3.8"
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
  
# tox_slowtests:
#     extends: .py_venv
#     stage: "Full test"
#     rules:
#       # Run for scheduled or triggered builds
#       - if: '$CI_PIPELINE_SOURCE == "trigger"'
#         when: always
#       - if: '$CI_PIPELINE_SOURCE == "schedule"'
#         when: always        
#       # Run for tags
#       - if: '$CI_COMMIT_TAG'
#         when: always
#       # And allow manual runs
#       - if: '$CI_COMMIT_BRANCH'
#         when: manual
#         allow_failure: true
#     script:
#       - pwd
#       - ls -l
#       - export PYTHONPATH="$PYTHONPATH:."
#       - python -c "import sys;print(sys.path)"
#       - pip install tox
#       - tox -- --runslow
#     coverage: '/^TOTAL.+?(\d+\%)$/'
#     needs: []

test_report:
  needs: ["tox-3.9"]
  stage: Publish test report
  image: 
     name: oberonamsterdam/wkhtmltopdf
     entrypoint: [""]
  script:
      - wkhtmltopdf --enable-local-file-access file:////builds/eco/tools/punpy/test_report/report.html test_report.pdf
      - wkhtmltopdf --enable-local-file-access file:////builds/eco/tools/punpy/test_report/cov_report/index.html cov_report.pdf
      - mv test_report.pdf ./quality_documentation/test_report.pdf
      - mv cov_report.pdf ./quality_documentation/cov_report.pdf
  artifacts:
    paths:
    - quality_documentation
    expire_in: 1 hour
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
### Documentation ###

# Upload the documentation to pages if it's a tagged commit
pages:
  extends: .py_venv
  stage: Readthedocs Documentation
  needs: []
  script:
    - sphinx-build docs public -b html
  artifacts:
    paths:
    - public
    expire_in: 1 hour

  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always
  
pdf_make:  
  extends: .py_venv
  stage: Build latex Documentation
  needs: []
  script:
    - sphinx-build docs latex -b latex
    - cp -r latex ./quality_documentation/latex
  artifacts:
    paths:
    - quality_documentation/latex
    expire_in: 1 hour
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always

pdf_compile:
  needs: ["pdf_make"]
  stage: Publish latex Documentation
  image:  charlesbaynham/ctanfull
  artifacts:
    paths:
    - user_manual.pdf
    expose_as: "Manual"
    name: ${CI_COMMIT_REF_SLUG}_manual.pdf
  script:
    - ls
    - cd quality_documentation/latex
    - make
    - cp user_manual.pdf ../../user_manual.pdf
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always

pdf_compile_all:
  needs: ["pdf_make","test_report"]
  stage: Combine quality documentation
  image:  charlesbaynham/ctanfull
  artifacts:
    paths:
    - QualityDocumentation.pdf
    expose_as: "QualityDocumentation"
    name: ${CI_COMMIT_REF_SLUG}_QualityDocumentation.pdf
  script:
    - cd quality_documentation/latex
    - ls
    - cd ..
    - cd uml
    - for i in *.png; do echo "\includegraphics[width=\textwidth]{$i}">>uml.tex; done
    - cd ..
    - latexmk -e '$pdflatex=q/pdflatex %O -shell-escape %S/' -pdf
    - cp QualityDocumentation.pdf ../.
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
# Copied contents of Gitlab's Code-Quality.gitlab-ci.yml so I can edit the rules

code_quality:
  stage: Static Analysis
  needs: []
  image: docker:19.03.5
  allow_failure: true
  services:
    - docker:19.03.5-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    CODE_QUALITY_IMAGE: "registry.gitlab.com/gitlab-org/ci-cd/codequality:0.85.9"
  script:
    - |
      if ! docker info &>/dev/null; then
        if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
          export DOCKER_HOST='tcp://localhost:2375'
        fi
      fi
    - docker pull --quiet "$CODE_QUALITY_IMAGE"
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "$CODE_QUALITY_IMAGE" /code
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    expire_in: 1 week
  dependencies: []
  
  rules:
    - if: '$CI_PROJECT_URL =~ /^.*gitlab.com.*/'
      when: always
